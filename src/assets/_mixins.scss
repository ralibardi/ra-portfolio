@use 'colours' as *;
@use 'variables' as *;
@use 'fonts' as *;

$themes: (
    light: (
        --accent-colour: map-get($primary, 1),
        --secondary-colour: map-get($secondary, 2),
        --light-grey: map-get($grey, 1),
        --grey: map-get($grey, 2),
        --dark-grey: map-get($grey, 3),
        --text-colour: $black,
        --background-colour: $white,
        --foreground-colour: map-get($grey, 3),
    ),
    dark: (
        --accent-colour: map-get($primary, 3),
        --secondary-colour: map-get($secondary, 2),
        --light-grey: map-get($grey, 4),
        --grey: map-get($grey, 5),
        --dark-grey: map-get($grey, 6),
        --text-colour: $white,
        --background-colour: $black,
        --foreground-colour: map-get($grey, 4),
    )
);

@mixin theme($mode: light) {
    @if map-has-key($themes, $mode) {
        @each $name, $value in map-get($themes, $mode) {
            #{$name}: #{$value};
        }
    } @else {
        @warn "Unsupported theme mode: #{$mode}";
    }
}

@mixin font-style($size: map-get($font-sizes, md), $weight: map-get($font-weights, medium), $color: var(--text-colour)) {
    font: $weight $size $font-family;
    color: $color;
}

@mixin size($width: auto, $height: auto) {
    width: $width;
    height: $height;
}

@mixin flexbox($direction: row, $justify: flex-start, $align: stretch) {
    display: flex;
    flex-flow: $direction;
    justify-content: $justify;
    align-items: $align;
}

@mixin box-shadow($x: map-get($spacing, 0), $y: map-get($spacing, '3xs'), $blur: map-get($spacing, '2xs'), $spread: map-get($spacing, '2xs'), $color: $black, $inset: false) {
    box-shadow: if($inset, inset, null) $x $y $blur if($spread, $spread, null) $color;
}

@mixin transition($properties...) {
    $result: ();
    @each $prop in $properties {
        $temp: null;
        @if type-of($prop) == 'list' {
            $temp: nth($prop, 1);
            $temp: $temp if(length($prop) > 1, ' ' + nth($prop, 2), '');
            $temp: $temp if(length($prop) > 2, ' ' + nth($prop, 3), '');
            $temp: $temp if(length($prop) > 3, ' ' + nth($prop, 4), '');
        } @else {
            $temp: $prop;
        }
        $result: append($result, $temp, comma);
    }
    transition: $result;
}

@mixin border-radius($radius: map-get($border, md)) {
    border-radius: $radius;
}

@mixin transform($scale: 1, $rotate: 0deg) {
    transform: scale($scale) rotate($rotate);
}