# This workflow builds and deploys a Node.js application to an Azure Web App upon commits to the main branch.
#
# Prerequisites:
# - An Azure Web App created.
# - A GitHub secret named AZURE_CREDENTIALS with the Azure credentials as it's value.
# - A GitHub secret named AZURE_WEBAPP_PUBLISH_PROFILE with the Azure publish profile as its value.

name: Deploy to Azure Workflow

on:
  push:
    branches:
      - main # Trigger on commits to the main branch
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '20.x'

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install
        continue-on-error: false

      - name: Build
        run: npm run build --if-present
        env:
          NODE_ENV: 'production'
          PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
          API_URL: ${{ secrets.API_URL }}
        continue-on-error: false

      - name: Check manifest.json presence
        shell: bash
        run: |
          if [ ! -f ./dist/static/assets/manifest.json ]; then
            echo "manifest.json not found in ./dist";
            exit 1;
          fi

      - name: Run tests
        run: npm run test:coverage --if-present
        continue-on-error: false

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ./dist

  sonarcloud:
    needs: build
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
          SONAR_TOKEN: ${{ secrets.TOKEN_SONAR }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANISATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info

      - name: SonarCloud Quality Gate Check
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.TOKEN_SONAR }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANISATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.qualitygate.wait=true

  deploy:
    needs: sonarcloud
    name: Deploy to Azure
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./dist

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if Web App exists
        id: check_app
        shell: bash
        run: |
          EXISTS=$(az webapp list --query "[?name=='${{ secrets.AZURE_WEBAPP_NAME }}'].name" -o tsv)
          if [ -z "$EXISTS" ]; then
            echo "WebApp does not exist, setting CREATE_APP to true."
            echo "CREATE_APP=true" >> $GITHUB_ENV
          else
            echo "WebApp exists, no need to create."
            echo "CREATE_APP=false" >> $GITHUB_ENV
          fi

      - name: Create Web App if it does not exist
        if: steps.check_app.outputs.CREATE_APP == 'true'
        run: |
          az webapp create --name ${{ secrets.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --plan ${{ secrets.AZURE_SERVICE_APP_PLAN }} --runtime "NODE|${{ env.NODE_VERSION }}"

      - name: Prepare prod.parameters.json
        run: |
          $json = Get-Content -Path .azuredevops/prod.parameters.json -Raw | ConvertFrom-Json
          $json.parameters.subscriptionId.value = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          $json.parameters.resourceGroupName.value = "${{ secrets.AZURE_RESOURCE_GROUP }}"
          $json.parameters.name.value = "${{ secrets.AZURE_WEBAPP_NAME }}"
          $json.parameters.location.value = "${{ secrets.AZURE_LOCATION }}"
          $json.parameters.hostingPlanName.value = "${{ secrets.AZURE_SERVICE_APP_PLAN }}"
          $json.parameters.serverFarmResourceGroup.value = "${{ secrets.AZURE_RESOURCE_GROUP }}"
          $json | ConvertTo-Json -Depth 100 | Set-Content -Path ./prod.parameters.json
        shell: pwsh

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./dist
